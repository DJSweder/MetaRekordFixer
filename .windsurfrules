## Pravidla komunikace s uživatelem:
#communication<br>
#workflow<br>
#critical<br>
1. Tykání a neformální komunikace v češtině
2. Přístup k uživateli jako k laikovi, neprogramátorovi
3. Stručnost v komunikaci
4. Generovat kód nebo ukázky POUZE pokud o to uživatel explicitně požádá. Platí i pro režim Chat.
5. Při slově "debatujeme" (a jeho tvarech) - ŽÁDNÝ kód ani ukázky
6. Vždy čekat na jasný pokyn od uživatele, nedělat nic navíc
7. Bez pokynu nevracet žádnou reakci, odpovídat jen na položené otázky.
8. Prevence plýtvání tokeny

## Povinné kroky před úpravou kódu:

#code_standards<br>
#workflow<br>
#critical<br>
1. Analyzovat **CELOU** stávající bázi pro udržení aktuálního kontextu (zejména @src/common; @src/modules; @src/main.go)
2. Analyzovat dokumentaci v souboru development_standards.txt, což je závazný dokument s pokyny pro tvorbu kódu. 
3. Pokud jsou pokyny v rozporu s development_standards.txt, upozornit uživatele, konzultovat.

## Pravidla pro tvorbu kódu:
#code_standards<br>
#workflow<br>
#critical<br>
1. Explicitně kontrolovat, zda plánované změny neporušují některý z bodů definovaných v dokumentaci (development_standards.txt)
2. Maximální opatrnost - vždy analyzovat, zda provedená změna nemá dopad na stávající funkčnost, chování atd.
3. Pokud existuje nejistota, raději se zeptat než provést změnu
4. Neimplementovat nic navíc bez domluvy
5. NIKDY neupravovat lokalizační soubory *.json - jsou generovány externě
6. VŽDY využít maximum z dostupných lokalizačních klíčů
7. Při potřebě nového klíče - zapsat neexistující klíč do kódu a informovat uživatele
8. Důkladná analýza příčin chyb před implementací opravy
9. Komentáře v angličtině dle konvencí Go
10. Po změnách vytvořit stručný laický souhrn

## Standard pro strukturování modulů:
#code_standards<br>
#module_structure<br>
#go<br>
1. Definice struktury modulu:
```go
type ModuleName struct {
    *common.ModuleBase    // vždy první
    // následují pole specifická pro modul (abecedně)
}
```
2. Pořadí metod v implementaci:

a) Nutný základ (společné pro všechny moduly):
- GetName() string
- GetConfigName() string
- GetIcon() fyne.Resource
- GetModuleContent() fyne.CanvasObject
- GetContent() fyne.CanvasObject
- LoadConfig(config ModuleConfig)
- SaveConfig() ModuleConfig
- initializeUI()
- GetStatusMessagesContainer() *widget.Container
- AddInfoMessage(message string)
- AddErrorMessage(message string)
- ClearStatusMessages()

b) Pomocné funkce (specifické pro modul):
- Seřazené abecedně
- Například: getFileType(), loadPlaylists(), validateInput() atd.

c) Hlavní funkce (specifické pro modul):
- Start() nebo jiná hlavní funkce modulu
- Implementace hlavní logiky modulu