; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName "MetaRekordFixer"
#define MyVersionInfoDescription "A DJ tool with features not possible in Rekordbox."
#define MyAppVersion "1.0.0"
#define MyAppPublisher "DJ Sweder"
#define MyAppExeName "metarekordfixer.exe"
#define MyAppCopyright "Â© DJ Sweder"
#define MyResources "sources"
#define MyOutputDir "..\\..\\release"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{58EDAD5B-F3B2-4F95-83AA-138F4DBF694D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
VersionInfoOriginalFileName={#MyAppExeName}
VersionInfoDescription={#MyVersionInfoDescription}
VersionInfoVersion={#MyAppVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppCopyright={#MyAppCopyright}
DefaultDirName={localappdata}\Programs\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
ShowLanguageDialog=yes
LicenseFile=disclaimer_EN.rtf
; Remove the following line to run in administrative install mode (install for all users).
PrivilegesRequired=lowest
SourceDir={#MyResources}
OutputDir={#MyOutputDir}\{#MyAppVersion}
OutputBaseFilename=metarekordfixer-1.0.0-win64-setup
SetupIconFile=MetaRekordFixer_transparent.ico
SolidCompression=yes
WizardStyle=modern


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"; LicenseFile: "disclaimer_EN.rtf"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"; LicenseFile: "disclaimer_CZ.rtf"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "slovak"; MessagesFile: "compiler:Languages\Slovak.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkedonce

[Files]
Source: "{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "7z.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
const
  FFmpegURL = 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip';
  ToolsDir = 'tools';

var
  DownloadPage: TDownloadWizardPage;

procedure InitializeWizard;
begin
// Pre-select "accept" for licence agreement
  WizardForm.LicenseAcceptedRadio.Checked := True;
  WizardForm.LicenseNotAcceptedRadio.Visible := True;
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), nil);
end;

function DownloadFFmpeg(): Boolean;
begin
  try
    DownloadPage.Clear;
    DownloadPage.Add(FFmpegURL, 'ffmpeg.zip', '');
    DownloadPage.Show;
    try
      DownloadPage.Download;
      Result := True;
    finally
      DownloadPage.Hide;
    end;
  except
    SuppressibleMsgBox(AddPeriod(GetExceptionMessage), mbCriticalError, MB_OK, IDOK);
    Result := False;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  TempPath: string;
  ZipPath: string;
  ToolsPath: string;
  ResultCode: Integer;
begin
  if CurStep = ssPostInstall then
  begin
    TempPath := ExpandConstant('{tmp}\ffmpeg');
    ZipPath := ExpandConstant('{tmp}\ffmpeg.zip');
    ToolsPath := ExpandConstant('{app}\' + ToolsDir);
    
    // Create tools directory
    ForceDirectories(ToolsPath);
    
    // Download FFmpeg
    if not DownloadFFmpeg then
      RaiseException('ffmpeg download failed');
    
    // Extract ZIP using 7z.exe
    ExtractTemporaryFile('7z.exe');
    if not Exec(ExpandConstant('{tmp}\7z.exe'), 'x "' + ZipPath + '" -o"' + TempPath + '" -y', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
      RaiseException('extraction of ffmpeg archive failed');
    
    // Use 7z command to find files in archive
    if Exec(ExpandConstant('{tmp}\7z.exe'), 'e "' + ZipPath + '" -o"' + ToolsPath + '" "*/bin/ffmpeg.exe" "*/bin/ffprobe.exe" -r -y', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
      Log('ffmpeg files was extracted to target folder')
    else
      Log('extraction of ffmpeg files failed');
    
    // Cleanup temporary files ()
    DelTree(TempPath, True, True, True);
    DeleteFile(ZipPath);
    DeleteFile(ExpandConstant('{tmp}\7z.exe'));
    DeleteFile(ExpandConstant('{app}\7z.exe'));
  end;
end;
    
[UninstallDelete]
Type: filesandordirs; Name: "{app}\tools"
Type: filesandordirs; Name: "{userappdata}\{#MyAppName}"
Type: files; Name: "{app}\7z.exe"